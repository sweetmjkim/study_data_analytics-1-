# -*- coding: utf-8 -*-
"""03_pandas_datetimes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mVAkarxWIdgcyzy1i3KTf9bBqB6xZOrh
"""

# 한글 폰트 설치
!apt-get install -y fonts-nanum
!fc-cache -fv
!rm ~/.cache/matplotlib -rf
# 설치 후 colab 경우 Reuntime > Restart session 필요

import matplotlib.pyplot as pit
import matplotlib as mpl
mpl.rc('font', family='NanumBarunGothic') # 혹은 다른 설치한 Nanum 폰트 사용

"""## datatime in Series"""

data = {
    "시작일": [
        "2019-01-07 08:56", "2019-02-05 09:30", "2019-03-10 11:00",
        "2019-04-12 10:15", "2019-05-19 12:42", "2019-06-21 13:53",
        "2019-07-28 14:08", "2019-08-15 15:22", "2019-09-18 16:33",
        "2019-10-23 17:44"
    ],
    "완료일_한글": [
        "2019-01-11 오후 05:32", "2019-02-09 오후 04:20", "2019-03-14 오후 06:45",
        "2019-04-16 오후 08:55", "2019-05-23 오후 07:30", "2019-06-25 오후 03:44",
        "2019-08-01 오후 04:16", "2019-08-19 오후 05:47", "2019-09-22 오후 06:00",
        "2019-10-27 오후 09:30"
    ],
    "신청일_수치": [
        20181227, 20190201, 20190306, 20190408, 20190515,
        20190617, 20190724, 20190811, 20190914, 20191019
    ],
    "신청일": [
        "2018.12.27", "2019.02.01", "2019.03.06", "2019.04.08", "2019.05.15",
        "2019.06.17", "2019.07.24", "2019.08.11", "2019.09.14", "2019.10.19"
    ]
}

import pandas as pd
df_datetimes = pd.DataFrame(data)
df_datetimes[:2]

"""### 문자열(날짜 구성과 유사한) --> to_datatime()"""

df_datetimes['시작일_datetime'] = pd.to_datetime(df_datetimes['시작일'])
df_datetimes.info()

df_datetimes

"""### 문자열(날짜 구성이 묘할 때) -> to_datetime with formatting date type"""

df_datetimes['신청일_datetime']=pd.to_datetime(df_datetimes['신청일'],format="%Y.%m.%d")
df_datetimes.info()

df_datetimes

"""### 수치형 -> to_datetime with formmatting date type"""

# pd.to_datetime(df_datetimes['신청일_수치'])
df_datetimes['신청일_수치_datetime'] = pd.to_datetime(df_datetimes['신청일_수치'],format="%Y%m%d")
df_datetimes['신청일_수치_datetime']

# 20230205 -> 202325
df_datetimes.info()

"""### 날짜간 연산"""

df_datetimes['착수일간격'] =  df_datetimes['신청일_datetime'] - df_datetimes['시작일_datetime']
df_datetimes['착수일간격']

df_datetimes.describe(include=['datetime'],datetime_is_numeric=True)      # 데이터 타입을 수치형으로 볼 때
# df_datetimes.describe(include=['datetime'],datetime_is_numeric=False)       # 데이터 타입을 범주형으로 볼 때

"""### 시간 단위별 분해
- 년, 월, 일, 주, 분기
"""

df_datetimes['신청일_datetime_year']=df_datetimes['신청일_datetime'].dt.year                      # 년도
df_datetimes['신청일_datetime_month']=df_datetimes['신청일_datetime'].dt.month                    # 월
df_datetimes['신청일_datetime_day']=df_datetimes['신청일_datetime'].dt.day                        # 일
df_datetimes['신청일_datetime_week']=df_datetimes['신청일_datetime'].dt.isocalendar().week        # 주
df_datetimes['신청일_datetime_quarter']=df_datetimes['신청일_datetime'].dt.quarter                # 분기
df_datetimes['신청일_datetime_year'],df_datetimes['신청일_datetime_month'],df_datetimes['신청일_datetime_day'],df_datetimes['신청일_datetime_week'],df_datetimes['신청일_datetime_quarter']

df_datetimes

df_datetimes['신청일_datetime_quarter'].unique()

df_datetimes['신청일_datetime_quarter'].value_counts()

df_datetimes.columns

df_startday_compose = df_datetimes[['신청일_datetime_month','신청일_datetime_week','신청일_datetime_quarter']]

df_startday_compose.info()

df_startday_compose.describe(datetime_is_numeric=True)

